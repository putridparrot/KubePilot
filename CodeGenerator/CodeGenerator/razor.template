@page "/{{PageName Title}}"
@inject IKubernetesClientService KubernetesClientService;
{{#if DescribeMethod }} 
@inject IDialogService DialogService
@inject IClipboardService ClipboardService
{{/if}}

<ListComponent Title="{{Title}}" IsLoading="@_loading" KubectlHint="@_kubeCtlHint" Selected="@_selected" OnRefresh="async () => await LoadAsync()">
    <Actions>
        {{#if DescribeMethod }} 
        <FluentButton Id="Describe" OnClick="@DescribeAsync" Disabled="@(_selected is null)">
            <FluentIcon Icon="Icons.Regular.Size16.Info"></FluentIcon>
        </FluentButton>
        <FluentTooltip Anchor="Describe">Describe</FluentTooltip>
        {{/if}}
        {{#if IsNamespaced}}
        <FluentCombobox Autocomplete="ComboboxAutocomplete.Both" Placeholder="Select Namespace" Height="200px" TOption="string" Items="@_namespaces" @bind-Value="@_selectedNamespace" SelectedOptionChanged="OnNamespaceChangedAsync" />
        {{/if}}
    </Actions>

    <ChildContent>
        <FluentDataGrid TGridItem="Selectable<{{ItemType}}>" Items="@_list" HeaderCellAsButtonWithMenu="false">
            <EmptyContent>
                <div>@(_failure ?? "No data to show")</div>
            </EmptyContent>
            <ChildContent>
                <SelectColumn TGridItem="Selectable<{{ItemType}}>"
                      SelectMode="DataGridSelectMode.Single"
                      SelectFromEntireRow="true"
                      Property="@(p => p.Selected)"
                      OnSelect="@(p => Select(p))" />
                {{#Fields}}
                <PropertyColumn Title="{{Title}}" Property="@(p => {{{Expression}}})"{{#if Sortable}} Sortable="true" {{/if}}{{#if IsDefaultSortColumn}} IsDefaultSortColumn="true" {{/if}}/>
                {{/Fields}}
            </ChildContent>
        </FluentDataGrid>
    </ChildContent>
</ListComponent>

@code {
    private bool _loading;
    private IQueryable<Selectable<{{ItemType}}>>? _list;
    private {{ItemType}}? _selected;
    private string? _failure;
    {{#if KubeCtlHint}}
    {{#if IsNamespaced}} 
    private string _kubeCtlHint = string.Empty;
    {{else}}
    private readonly string _kubeCtlHint = "{{KubeCtlHint}}";
    {{/if}}
    {{else}}
    private string _kubeCtlHint = string.Empty;
    {{/if}}
    {{#if IsNamespaced}} 
    private string[]? _namespaces;
    private string? _selectedNamespace;
    {{/if}}

    {{#ExtraMethods}}
    {{{this}}}
    {{/ExtraMethods}}

    protected override async Task OnInitializedAsync()
    {
        {{#if IsNamespaced}} 
        _selectedNamespace = KubernetesClientService.GetCurrentNamespace();
        {{/if}}
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            _loading = true;
            {{#if IsNamespaced}}
            var items = await KubernetesClientService.{{ListMethod}}(_selectedNamespace);
            {{else}}
            var items = await KubernetesClientService.{{ListMethod}}();
            {{/if}}
            switch (items)
            {
                case ISuccess:
                    _list = items.Value.{{PropertyName}}.ToSelectableQueryable();
                    _failure = null;
                    break;
                case IFailure failure:
                    _list = null;
                    _failure = failure.FailureMessage();
                    break;
            }
            {{#if KubeCtlHint}}
            {{#if IsNamespaced}} 
            _kubeCtlHint = $"{{KubeCtlHint}} {_selectedNamespace.NamespaceParameter()}";
            {{/if}}
            {{/if}}
            {{#if IsNamespaced}} 
            _namespaces = await KubernetesClientService.GetNamespaceNamesAsync();
            {{/if}}
        }
        finally
        {
            _loading = false;
        }
    }

    private void Select((Selectable<{{ItemType}}> Item, bool Selected) p)
    {
        p.Item.Selected = p.Selected;
        _selected = p.Item.Selected ? p.Item.Item : null;
    }

    {{#if IsNamespaced}} 
    private async Task OnNamespaceChangedAsync(string? newNamespace)
    {
        _selectedNamespace = newNamespace;
        await LoadAsync();
    }
    {{/if}}

    {{#if DescribeMethod }} 
    private async Task DescribeAsync()
    {
        if (_selected is null)
            return;

        var result = await KubernetesClientService.{{DescribeMethod}};
        switch (result)
        {
            case ISuccess:
                var yaml = Converter.ToYaml(result);

                var dialog = await DialogService.ShowDialogAsync<YamlViewerDialog>(yaml, new DialogParameters
                {
                    Title = "YAML",
                    Width = "100vh",
                    Height = "90vh",
                    PrimaryAction = "Copy",
                    SecondaryAction = "Close"
                });

                var dlgResult = await dialog.Result;
                if (dlgResult.Data is not null && !dlgResult.Cancelled)
                {
                    await ClipboardService.ToClipboardAsync(yaml);
                }

                _failure = null;
                break;
            case IFailure failure:
                _failure = failure.FailureMessage();
                break;
        }
    }
    {{/if}}
}