@page "/apiresources"
@inject IKubernetesClientService KubernetesClientService;

<ListComponent Title="API Resources" IsLoading="@_loading" KubectlHint="@_kubeCtlHint" Selected="@_selected" OnRefresh="async () => await LoadAsync()">
    <Actions>
    </Actions>

    <ChildContent>
        <FluentDataGrid TGridItem="Selectable<V1APIResource>" Items="@FilteredItems" HeaderCellAsButtonWithMenu="false">
            <EmptyContent>
                <div>@(_failure ?? "No data to show")</div>
            </EmptyContent>
            <ChildContent>
                <SelectColumn TGridItem="Selectable<V1APIResource>"
                      SelectMode="DataGridSelectMode.Single"
                      SelectFromEntireRow="true"
                      Property="@(p => p.Selected)"
                      OnSelect="@(p => Select(p))" />
                <PropertyColumn Title="Name" Property="@(p => p.Item.Name)" Sortable="true" IsDefaultSortColumn="true"
                    Comparer="@ColumnStringComparer.Instance" Filtered="!string.IsNullOrWhiteSpace(_nameFilter)">
                    <ColumnOptions>
                            <FluentSearch Autofocus=true @bind-Value=_nameFilter
                                          @oninput="NameFilter"
                                          Placeholder="Name..." />
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Title="Version" Property="@(p => p.Item.Version)" Sortable="true" />
                <PropertyColumn Title="Namespace" Property="@(p => p.Item.Namespaced)" Sortable="true" />
                <PropertyColumn Title="Shortnames" Property="@(p => p.Item.ShortNames.CsvJoin())" Sortable="true" />
                <PropertyColumn Title="Kind" Property="@(p => p.Item.Kind)" Sortable="true" />
            </ChildContent>
        </FluentDataGrid>
    </ChildContent>
</ListComponent>

@code {
    private bool _loading;
    private IQueryable<Selectable<V1APIResource>>? _list;
    private V1APIResource? _selected;
    private string? _failure;
    private readonly string _kubeCtlHint = "kubectl api-resources";
    private string _nameFilter = string.Empty; 

    private IQueryable<Selectable<V1APIResource>>? FilteredItems => _list?.Where(p => 
        p.Item.Name.Contains(_nameFilter, StringComparison.CurrentCultureIgnoreCase)
    );


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            _loading = true;
            var items = await KubernetesClientService.GetApiResourcesAsync();
            switch (items)
            {
                case ISuccess:
                    _list = items.Value.Resources.ToSelectableQueryable();
                    _failure = null;
                    break;
                case IFailure failure:
                    _list = null;
                    _failure = failure.FailureMessage();
                    break;
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private void Select((Selectable<V1APIResource> Item, bool Selected) p)
    {
        p.Item.Selected = p.Selected;
        _selected = p.Item.Selected ? p.Item.Item : null;
    }



    private void NameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            _nameFilter = value;
        }
    }
}