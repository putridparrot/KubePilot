@page "/clustertrustbundles"
@inject IKubernetesClientService KubernetesClientService;

<ListComponent Title="Cluster Trust Bundles" IsLoading="@_loading" KubectlHint="@_kubeCtlHint" Selected="@_selected" OnRefresh="async () => await LoadAsync()">
    <Actions>
    </Actions>

    <ChildContent>
        <FluentDataGrid TGridItem="Selectable<V1alpha1ClusterTrustBundle>" Items="@_list" HeaderCellAsButtonWithMenu="false">
            <EmptyContent>
                <div>@(_failure ?? "No data to show")</div>
            </EmptyContent>
            <ChildContent>
                <SelectColumn TGridItem="Selectable<V1alpha1ClusterTrustBundle>"
                      SelectMode="DataGridSelectMode.Single"
                      SelectFromEntireRow="true"
                      Property="@(p => p.Selected)"
                      OnSelect="@(p => Select(p))" />
                <PropertyColumn Title="Name" Property="@(p => p.Item.Metadata.Name)" Sortable="true" />
                <PropertyColumn Title="Creation Timestamp" Property="@(p => p.Item.Metadata.CreationTimestamp)" Sortable="true" />
            </ChildContent>
        </FluentDataGrid>
    </ChildContent>
</ListComponent>

@code {
    private bool _loading;
    private IQueryable<Selectable<V1alpha1ClusterTrustBundle>>? _list;
    private V1alpha1ClusterTrustBundle? _selected;
    private string? _failure;
    private string _kubeCtlHint = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            _loading = true;
            var items = await KubernetesClientService.GetClusterTrustBundlesAsync();
            switch (items)
            {
                case ISuccess:
                    _list = items.Value.Items.ToSelectableQueryable();
                    _failure = null;
                    break;
                case IFailure failure:
                    _list = null;
                    _failure = failure.FailureMessage();
                    break;
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private void Select((Selectable<V1alpha1ClusterTrustBundle> Item, bool Selected) p)
    {
        p.Item.Selected = p.Selected;
        _selected = p.Item.Selected ? p.Item.Item : null;
    }


}