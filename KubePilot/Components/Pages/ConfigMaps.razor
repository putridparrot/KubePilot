@page "/configmaps"
@inject IKubernetesClientService KubernetesClientService;

<ListPage Title="Config Maps" IsLoading="@_loading" KubectlHint="kubectl get configmaps --all-namespaces" Selected="@_selected">
    <FluentDataGrid TGridItem="Selectable<V1ConfigMap>" Items="@_list" HeaderCellAsButtonWithMenu="false">
        <EmptyContent>
            <div>@(_failure ?? "No data to show")</div>
        </EmptyContent>
        <ChildContent>
            <SelectColumn TGridItem="Selectable<V1ConfigMap>"
                      SelectMode="DataGridSelectMode.Single"
                      SelectFromEntireRow="true"
                      Property="@(p => p.Selected)"
                      OnSelect="@(p => Select(p))" />
            <PropertyColumn Title="Namespace" Property="@(p => p.Item.Metadata.NamespaceProperty)" Sortable="true" />
            <PropertyColumn Title="Name" Property="@(p => p.Item.Metadata.Name)" Sortable="true" />
            <PropertyColumn Title="Data" Property="@(p => p.Item.Data.Count)" Sortable="true" />
            <PropertyColumn Title="Creation Timestamp" Property="@(p => p.Item.Metadata.CreationTimestamp)" Sortable="true" />
        </ChildContent>
    </FluentDataGrid>
</ListPage>

@code {
    private bool _loading = true;
    private IQueryable<Selectable<V1ConfigMap>>? _list;
    private V1ConfigMap? _selected;
    private string? _failure;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var items = await KubernetesClientService.GetConfigMapsAsync();
            switch (items)
            {
                case ISuccess success:
                    _list = items.Value.Items.ToSelectableQueryable();
                    _failure = null;
                    break;
                case IFailure failure:
                    _list = null;
                    _failure = failure.FailureMessage();
                    break;
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private void Select((Selectable<V1ConfigMap> Item, bool Selected) p)
    {
        p.Item.Selected = p.Selected;
        _selected = p.Item.Selected ? p.Item.Item : null;
    }
}