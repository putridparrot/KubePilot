@page "/serviceaccounts"
@inject IKubernetesClientService KubernetesClientService;

<ListPage Title="Service Accounts" IsLoading="@_loading" KubectlHint="@_kubeCtlHint" Selected="@_selected">

    <ChildContent>
        <FluentDataGrid TGridItem="Selectable<V1ServiceAccount>" Items="@_list" HeaderCellAsButtonWithMenu="false">
            <EmptyContent>
                <div>@(_failure ?? "No data to show")</div>
            </EmptyContent>
            <ChildContent>
                <SelectColumn TGridItem="Selectable<V1ServiceAccount>"
                      SelectMode="DataGridSelectMode.Single"
                      SelectFromEntireRow="true"
                      Property="@(p => p.Selected)"
                      OnSelect="@(p => Select(p))" />
                <PropertyColumn Title="Namespace" Property="@(p => p.Item.Metadata.NamespaceProperty)" Sortable="true" />
                <PropertyColumn Title="Name" Property="@(p => p.Item.Metadata.Name)" Sortable="true" />
                <PropertyColumn Title="Count" Property="@(p => GetCount(p))" Sortable="true" />
                <PropertyColumn Title="Creation Timestamp" Property="@(p => p.Item.Metadata.CreationTimestamp)" Sortable="true" />
            </ChildContent>
        </FluentDataGrid>
    </ChildContent>
</ListPage>

@code {
    private bool _loading = true;
    private IQueryable<Selectable<V1ServiceAccount>>? _list;
    private V1ServiceAccount? _selected;
    private string? _failure;
    private string _kubeCtlHint = string.Empty;

    private static int GetCount(Selectable<V1ServiceAccount> s) => s.Item.Secrets?.Count ?? 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var items = await KubernetesClientService.GetServiceAccountsAsync(KubernetesClientService.GetCurrentNamespace());
            switch (items)
            {
                case ISuccess:
                    _list = items.Value.Items.ToSelectableQueryable();
                    _failure = null;
                    break;
                case IFailure failure:
                    _list = null;
                    _failure = failure.FailureMessage();
                    break;
            }
            _kubeCtlHint = $"kubectl get serviceaccounts {KubernetesClientService.GetCurrentNamespace().NamespaceParameter()}";
        }
        finally
        {
            _loading = false;
        }
    }

    private void Select((Selectable<V1ServiceAccount> Item, bool Selected) p)
    {
        p.Item.Selected = p.Selected;
        _selected = p.Item.Selected ? p.Item.Item : null;
    }

}